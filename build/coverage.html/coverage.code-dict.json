{"/home/travis/build/npmtest/node-npmtest-node-tvdb/test.js":"/* istanbul instrument in package npmtest_node_tvdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-tvdb/lib.npmtest_node_tvdb.js":"/* istanbul instrument in package npmtest_node_tvdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_tvdb = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_tvdb = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-tvdb/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-tvdb && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_tvdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_tvdb\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_tvdb.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_tvdb.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_tvdb.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_tvdb.__dirname + '/lib.npmtest_node_tvdb.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-tvdb/node_modules/node-tvdb/index.js":"/*!\n * node-tvdb\n *\n * Node.js library for accessing TheTVDB API at <https://api.thetvdb.com/swagger>\n *\n * Copyright (c) 2014-2017 Edward Wellbrook <edwellbrook@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst url = require('url');\nconst request = require('node-fetch');\nconst flatten = require('lodash/flatten');\n\nconst BASE_URL = 'https://api.thetvdb.com';\nconst LIB_VERSION = require('./package.json').version;\nconst API_VERSION = 'v2.1.1';\nconst AV_HEADER = `application/vnd.thetvdb.${API_VERSION}`;\n\nconst DEFAULT_OPTS = {\n    getAllPages: true,\n    headers: {\n        'User-Agent': `node-tvdb/${LIB_VERSION} (+https://github.com/edwellbrook/node-tvdb)`\n    }\n};\n\n\n//\n// API Client\n//\n\nclass Client {\n\n    /**\n     * @param {String} apiKey\n     * @param {String} [language]\n     */\n\n    constructor(apiKey, language) {\n        if (!apiKey) {\n            throw new Error('API key is required');\n        }\n\n        this.apiKey = apiKey;\n        this.language = language || 'en';\n\n        // store and manage auth token\n        let tokenPromise = undefined;\n\n        this.getToken = function() {\n            if (tokenPromise === undefined) {\n                tokenPromise = logIn(this.apiKey);\n            }\n\n            return tokenPromise;\n        };\n    }\n\n    /**\n     * Get available languages useable by TheTVDB API.\n     *\n     * ``` javascript\n     * tvdb.getLanguages()\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {Object}  [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Languages/get_languages\n     * @public\n     */\n\n    getLanguages(opts) {\n        return this.sendRequest('languages', opts);\n    }\n\n    /**\n     * Get episode by episode id.\n     *\n     * ``` javascript\n     * tvdb.getEpisodeById(4768125)\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {Number|String} episodeId\n     * @param   {Object}        [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Episodes/get_episodes_id\n     * @public\n     */\n\n    getEpisodeById(episodeId, opts) {\n        return this.sendRequest(`episodes/${episodeId}`, opts);\n    }\n\n    /**\n     * Get all episodes by series id.\n     *\n     * ``` javascript\n     * tvdb.getEpisodesBySeriesId(153021)\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {Number|String} seriesId\n     * @param   {Object}        [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Series/get_series_id_episodes\n     * @public\n     */\n\n    getEpisodesBySeriesId(seriesId, opts) {\n        return this.sendRequest(`series/${seriesId}/episodes`, opts);\n    }\n\n    /**\n     * Get basic series information by id.\n     *\n     * ``` javascript\n     * tvdb.getSeriesById(73255)\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {Number|String} seriesId\n     * @param   {Object}        [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Series/get_series_id\n     * @public\n     */\n\n    getSeriesById(seriesId, opts) {\n        return this.sendRequest(`series/${seriesId}`, opts);\n    }\n\n    /**\n     * Get series episode by air date.\n     *\n     * ``` javascript\n     * tvdb.getEpisodeByAirDate(153021, '2011-10-03')\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {Number|String} seriesId\n     * @param   {String}        airDate\n     * @param   {Object}        [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Series/get_series_id_episodes_query\n     * @public\n     */\n\n    getEpisodesByAirDate(seriesId, airDate, opts) {\n        const query = { firstAired: airDate };\n        const reqOpts = Object.assign({}, opts, { query: query });\n        return this.sendRequest(`series/${seriesId}/episodes/query`, reqOpts);\n    }\n\n    /**\n     * Get basic series information by name.\n     *\n     * ``` javascript\n     * tvdb.getSeriesByName('Breaking Bad')\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {String}  name\n     * @param   {Object}  [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Search/get_search_series\n     * @public\n     */\n\n    getSeriesByName(name, opts) {\n        const query = { name: name };\n        const reqOpts = Object.assign({}, opts, { query: query });\n        return this.sendRequest(`search/series`, reqOpts);\n    }\n\n    /**\n     * Get series actors by series id.\n     *\n     * ``` javascript\n     * tvdb.getActors(73255)\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {Number|String} seriesId\n     * @param   {Object}        [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Series/get_series_id_actors\n     * @public\n     */\n\n    getActors(seriesId, opts) {\n        return this.sendRequest(`series/${seriesId}/actors`, opts);\n    }\n\n    /**\n     * Get basic series information by imdb id.\n     *\n     * ``` javascript\n     * tvdb.getSeriesByImdbId('tt0903747')\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {String}  imdbId\n     * @param   {Object}  [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Search/get_search_series\n     * @public\n     */\n\n    getSeriesByImdbId(imdbId, opts) {\n        const query = { imdbId: imdbId };\n        const reqOpts = Object.assign({}, opts, { query: query });\n        return this.sendRequest(`search/series`, reqOpts);\n    }\n\n    /**\n     * Get basic series information by zap2it id.\n     *\n     * ``` javascript\n     * tvdb.getSeriesByZap2ItId('EP00018693')\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {String}  zap2ItId\n     * @param   {Object}  [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Search/get_search_series\n     * @public\n     */\n\n    getSeriesByZap2ItId(zap2ItId, opts) {\n        const query = { zap2itId: zap2ItId };\n        const reqOpts = Object.assign({}, opts, { query: query });\n        return this.sendRequest(`search/series`, reqOpts);\n    }\n\n    /**\n     * Get series banner by series id.\n     *\n     * ``` javascript\n     * tvdb.getSeriesBanner(73255)\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {Number|String} seriesId\n     * @param   {Object}        [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Series/get_series_id_filter\n     * @public\n     */\n\n    getSeriesBanner(seriesId, opts) {\n        const query = { keys: 'banner' };\n        const reqOpts = Object.assign({}, opts, { query: query });\n        return this.sendRequest(`series/${seriesId}/filter`, reqOpts)\n            .then(response => response.banner);\n    }\n\n    /**\n     * Get series poster by series id.\n     *\n     * ``` javascript\n     * tvdb.getSeriesPoster(73255)\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {Number|String} seriesId\n     * @param   {Object}        [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Series/get_series_id_filter\n     * @public\n     */\n    getSeriesPosters(seriesId, opts) {\n        const query = { keyType: 'poster' };\n        const reqOpts = Object.assign({}, opts, { query: query });\n        return this.sendRequest(`series/${seriesId}/images/query`, reqOpts);\n    }\n\n    /**\n     * Get a list of series updated since a given unix timestamp (and, if given,\n     * between a second timestamp).\n     *\n     * ``` javascript\n     * tvdb.getUpdates(1400611370, 1400621370)\n     *     .then(response => { handle response })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {Number}  fromTime - timestamp to get series updates from\n     * @param   {Number}  [toTime] - timestamp to get series updates to\n     * @param   {Object}  [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @see     https://api.thetvdb.com/swagger#!/Updates/get_updated_query\n     * @public\n     */\n\n    getUpdates(fromTime, toTime, opts) {\n        const query = { fromTime: fromTime };\n        if (toTime) {\n            query.toTime = toTime;\n        } else {\n            opts = toTime;\n        }\n\n        const reqOpts = Object.assign({}, opts, { query: query });\n        return this.sendRequest('updated/query', reqOpts);\n    }\n\n    /**\n     * Get series and episode information by series id. Helper for calling\n     * `getSeriesById` and `getEpisodesBySeriesId` at the same time.\n     *\n     * ``` javascript\n     * tvdb.getSeriesAllById(73255)\n     *     .then(response => {\n     *         response; // contains series data (i.e. `id`, `seriesName`)\n     *         response.episodes; // contains an array of episodes\n     *     })\n     *     .catch(error => { handle error });\n     * ```\n     *\n     * @param   {Number|String} seriesId\n     * @param   {Object}        [opts] - additional options for request\n     * @returns {Promise}\n     *\n     * @public\n     */\n\n    getSeriesAllById(seriesId, opts) {\n        return Promise.all([\n            this.getSeriesById(seriesId, opts),\n            this.getEpisodesBySeriesId(seriesId, opts)\n        ])\n        .then(results => {\n            let series = results[0];\n            series.episodes = results[1];\n            return series;\n        });\n    }\n\n    /**\n    * Runs a get request with the given options, useful for running custom\n    * requests.\n    *\n    * ``` javascript\n    * tvdb.sendRequest('custom/endpoint', { custom: 'options' })\n    *     .then(response => { handle response })\n    *     .catch(error => { handle error });\n    * ```\n    *\n    * @param   {String}  path   - path for http resource\n    * @param   {Object}  [opts] - additional options for request\n    * @returns {Promise}\n    *\n    * @public\n    */\n\n    sendRequest(path, opts) {\n        const options = Object.assign({}, DEFAULT_OPTS, opts);\n        const query = Object.assign({}, options.query);\n        const headers = Object.assign({\n            'Accept':          AV_HEADER,\n            'Accept-language': options.lang || this.language\n        }, options.headers);\n\n        const requestURL = BASE_URL + '/' + url.format({\n            pathname: path,\n            query: query\n        });\n\n        return this.getToken()\n            .then(token => {\n                headers['Authorization'] = `Bearer ${token}`;\n                return request(requestURL, { headers: headers });\n            })\n            .then(res => checkHttpError(res))\n            .then(res => checkJsonError(res))\n            .then(json => getNextPages(this, json, path, options))\n            .then(json => json.data);\n    }\n\n}\n\n/**\n * Returns the next page of a paged response.\n *\n * @param   {TVDB}    client   TVDB client to run next request with\n * @param   {Object}  res      response from previous request\n * @param   {String}  path     path from previous request\n * @param   {Object}  opts     additional options from previous request\n * @returns {Promise}\n * @private\n */\n\nfunction getNextPages(client, res, path, opts) {\n    if (!hasNextPage(res) || !opts.getAllPages) {\n        return Promise.resolve(res);\n    }\n\n    const reqOpts = Object.assign({}, opts, {query: { page: res.links.next }});\n\n    return client.sendRequest(path, reqOpts)\n        .then(nextRes => [res.data, nextRes])\n        .then(dataArr => {\n            return { data: flatten(dataArr) };\n        });\n}\n\n/**\n * Check response for HTTP error. Return a rejected promise if there's an error\n * otherwise resolve the full response object.\n *\n * @param   {Object}  res node-fetch response object\n * @returns {Promise}\n * @private\n */\n\nfunction checkHttpError(res) {\n    const contentType = res.headers.get('content-type') || '';\n\n    if (res.status && res.status >= 400 && !contentType.includes('application/json')) {\n        let err = new Error(res.statusText);\n        err.response = res;\n        return Promise.reject(err);\n    }\n    return Promise.resolve(res);\n}\n\n/**\n * Check response for JSON error. Return a rejected promise if there's an error\n * otherwise resolve the response body as a JSON object.\n *\n * @param   {Object}  res node-fetch response object\n * @returns {Promise}\n * @private\n */\n\nfunction checkJsonError(res) {\n    return res.json().then((json) => {\n        if (json.Error) {\n            let err = new Error(json.Error);\n            err.response = res;\n            return Promise.reject(err);\n        }\n        return Promise.resolve(json);\n    });\n}\n\n/**\n * Perform login flow with given API Key.\n *\n * @param   {String}  apiKey\n * @returns {Promise}\n * @private\n */\n\nfunction logIn(apiKey) {\n    const opts = {\n        method: 'POST',\n        body: JSON.stringify({ apikey: apiKey }),\n        headers: {\n            'Accept':       AV_HEADER,\n            'Content-Type': 'application/json'\n        }\n    };\n\n    return request(`${BASE_URL}/login`, opts)\n        .then(res => checkHttpError(res))\n        .then(res => checkJsonError(res))\n        .then(json => json.token);\n}\n\n/**\n * Returns true if the response has additional pages, otherwise returns false.\n *\n * @param   {Object}  response\n * @returns {Boolean}\n * @private\n */\n\nfunction hasNextPage(response) {\n    return response && response.links && response.links.next;\n}\n\n//\n// Exports\n//\n\nmodule.exports = Client;\n"}